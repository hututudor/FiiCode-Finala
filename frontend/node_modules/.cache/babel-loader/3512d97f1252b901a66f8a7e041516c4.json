{"ast":null,"code":"import _defineProperty from \"/home/tudor/projects/FiiCode-Finala/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/tudor/projects/FiiCode-Finala/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tudor/projects/FiiCode-Finala/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tudor/projects/FiiCode-Finala/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tudor/projects/FiiCode-Finala/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tudor/projects/FiiCode-Finala/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/tudor/projects/FiiCode-Finala/frontend/src/components/Modals/Edit/EditForm/index.jsx\";\nimport React from 'react';\nimport FormClass from '../../../hoc/FormClass';\nimport { Modal, Form, Icon, Message, Button } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport Joi from 'joi-browser';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport * as nephew from '../../../../services/nephewsService';\n\nvar EditAlbumModalForm =\n/*#__PURE__*/\nfunction (_FormClass) {\n  _inherits(EditAlbumModalForm, _FormClass);\n\n  function EditAlbumModalForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditAlbumModalForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditAlbumModalForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: {\n        name: '',\n        github: ''\n      },\n      errors: {}\n    };\n    _this.schema = {\n      name: Joi.string().required().label('Name'),\n      github: Joi.string().url().required().label('Github'),\n      public: Joi.boolean().required().label('Public'),\n      controls: Joi.boolean().required().label('Controls'),\n      autoplay: Joi.boolean().required().label('Autoplay')\n    };\n\n    _this.closeModal = function () {\n      _this.props.closeModal();\n    };\n\n    _this.doSubmit = function () {\n      nephew.edit({\n        name: _this.state.data.name,\n        color: _this.state.data.color,\n        public: _this.state.data.public ? 1 : 0,\n        controls: _this.state.data.controls ? 1 : 0,\n        autoplay: _this.state.data.autoplay ? 1 : 0,\n        uuid: _this.props.options.uuid\n      }).then(function (res) {\n        _this.props.editAlbum(_this.props.options.uuid, res.data.album);\n\n        toast.success('Saved!');\n\n        _this.closeModal();\n      }).catch(function (err) {\n        console.log('fdf', err);\n        toast.error('Error saving!');\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EditAlbumModalForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        data: {\n          name: this.props.options.name,\n          color: this.props.options.color,\n          public: this.props.options.public === 1 ? true : false,\n          controls: this.props.options.controls === 1 ? true : false,\n          autoplay: this.props.options.autoplay === 1 ? true : false\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _React$createElement,\n          _this2 = this;\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Modal.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Modal.Description, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Form.Input, {\n        fluid: true,\n        name: \"name\",\n        placeholder: lang.get('dashboard.albums.modals.all.name'),\n        label: lang.get('dashboard.albums.modals.all.name'),\n        onChange: this.handleChange,\n        value: this.state.data.name,\n        className: this.getClass('name'),\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Lang, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"dashboard.albums.modals.all.color\")), React.createElement(\"select\", (_React$createElement = {\n        className: \"ui fluid dropdown\",\n        name: \"color\",\n        onChange: this.handleChange,\n        value: this.state.data.color\n      }, _defineProperty(_React$createElement, \"className\", this.getClass('color')), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement), color.colors.map(function (color, index) {\n        return React.createElement(\"option\", {\n          key: index,\n          value: color,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, lang.get('colors.' + color));\n      }))), React.createElement(\"div\", {\n        className: \"ui toggle checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"public\",\n        onChange: this.handleChange,\n        checked: this.state.data.public,\n        className: this.getClass('public'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Lang, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"dashboard.albums.modals.all.public\"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Lang, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"dashboard.albums.modals.all.settings\")), React.createElement(\"div\", {\n        className: \"ui toggle checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"controls\",\n        onChange: this.handleChange,\n        checked: this.state.data.controls,\n        className: this.getClass('controls'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Lang, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"dashboard.albums.modals.all.controls\"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"ui toggle checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"autoplay\",\n        onChange: this.handleChange,\n        checked: this.state.data.autoplay,\n        className: this.getClass('autoplay'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Lang, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"dashboard.albums.modals.all.autoplay\")))), _.isEmpty(this.state.errors) ? '' : React.createElement(Message, {\n        error: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Lang, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"auth.errors\")), this.displayErrors()))), React.createElement(Modal.Actions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(Button, {\n        labelPosition: \"left\",\n        icon: true,\n        negative: true,\n        onClick: function onClick() {\n          return _this2.closeModal();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"remove\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), \"Cancel\"), React.createElement(Button, {\n        labelPosition: \"right\",\n        icon: true,\n        positive: true,\n        onClick: function onClick(event) {\n          return _this2.handleSubmit(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"save\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), \"Save\")));\n    }\n  }]);\n\n  return EditAlbumModalForm;\n}(FormClass);\n\nexport default connect(EditAlbumModalForm);","map":{"version":3,"sources":["/home/tudor/projects/FiiCode-Finala/frontend/src/components/Modals/Edit/EditForm/index.jsx"],"names":["React","FormClass","Modal","Form","Icon","Message","Button","_","Joi","connect","toast","nephew","EditAlbumModalForm","state","data","name","github","errors","schema","string","required","label","url","public","boolean","controls","autoplay","closeModal","props","doSubmit","edit","color","uuid","options","then","res","editAlbum","album","success","catch","err","console","log","error","setState","handleSubmit","lang","get","handleChange","getClass","colors","map","index","isEmpty","displayErrors","event"],"mappings":"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","sourcesContent":["import React from 'react';\nimport FormClass from '../../../hoc/FormClass';\nimport { Modal, Form, Icon, Message, Button } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport Joi from 'joi-browser';\nimport { connect } from 'react-redux';\nimport {toast} from 'react-toastify';\nimport * as nephew from '../../../../services/nephewsService';\n\nclass EditAlbumModalForm extends FormClass {\n  state = {\n    data: {\n      name: '',\n      github: ''\n    },\n    errors: {}\n  };\n\n  schema = {\n    name: Joi.string()\n      .required()\n      .label('Name'),\n    github: Joi.string().url()\n      .required()\n      .label('Github'),\n    public: Joi.boolean()\n      .required()\n      .label('Public'),\n    controls: Joi.boolean()\n      .required()\n      .label('Controls'),\n    autoplay: Joi.boolean()\n      .required()\n      .label('Autoplay')\n  };\n\n  componentDidMount() {\n    this.setState({\n      data: {\n        name: this.props.options.name,\n        color: this.props.options.color,\n        public: this.props.options.public === 1 ? true : false,\n        controls: this.props.options.controls === 1 ? true : false,\n        autoplay: this.props.options.autoplay === 1 ? true : false\n      }\n    });\n  }\n\n  closeModal = () => {\n    this.props.closeModal();\n  };\n\n  doSubmit = () => {\n    nephew\n      .edit({\n        name: this.state.data.name,\n        color: this.state.data.color,\n        public: this.state.data.public ? 1 : 0,\n        controls: this.state.data.controls ? 1 : 0,\n        autoplay: this.state.data.autoplay ? 1 : 0,\n        uuid: this.props.options.uuid\n      })\n      .then(res => {\n        this.props.editAlbum(this.props.options.uuid, res.data.album);\n        toast.success('Saved!');\n        this.closeModal();\n      })\n      .catch(err => {\n        console.log('fdf', err);\n        toast.error('Error saving!');\n      });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Modal.Content>\n          <Modal.Description>\n            <Form onSubmit={this.handleSubmit} size=\"large\">\n              <Form.Input\n                fluid\n                name=\"name\"\n                placeholder={lang.get('dashboard.albums.modals.all.name')}\n                label={lang.get('dashboard.albums.modals.all.name')}\n                onChange={this.handleChange}\n                value={this.state.data.name}\n                className={this.getClass('name')}\n                type=\"text\"\n              />\n\n              <Form.Field>\n                <Form.Field>\n                  <Lang>dashboard.albums.modals.all.color</Lang>\n                </Form.Field>\n                <select\n                  className=\"ui fluid dropdown\"\n                  name=\"color\"\n                  onChange={this.handleChange}\n                  value={this.state.data.color}\n                  className={this.getClass('color')}\n                >\n                  {color.colors.map((color, index) => (\n                    <option key={index} value={color}>\n                      {lang.get('colors.' + color)}\n                    </option>\n                  ))}\n                </select>\n              </Form.Field>\n\n              <div className=\"ui toggle checkbox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"public\"\n                  onChange={this.handleChange}\n                  checked={this.state.data.public}\n                  className={this.getClass('public')}\n                />\n                <label>\n                  <Lang>dashboard.albums.modals.all.public</Lang>\n                </label>\n              </div>\n\n              <br />\n\n              <h3>\n                <Lang>dashboard.albums.modals.all.settings</Lang>\n              </h3>\n\n              <div className=\"ui toggle checkbox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"controls\"\n                  onChange={this.handleChange}\n                  checked={this.state.data.controls}\n                  className={this.getClass('controls')}\n                />\n                <label>\n                  <Lang>dashboard.albums.modals.all.controls</Lang>\n                </label>\n              </div>\n\n              <br />\n              <br />\n\n              <div className=\"ui toggle checkbox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"autoplay\"\n                  onChange={this.handleChange}\n                  checked={this.state.data.autoplay}\n                  className={this.getClass('autoplay')}\n                />\n                <label>\n                  <Lang>dashboard.albums.modals.all.autoplay</Lang>\n                </label>\n              </div>\n            </Form>\n            {_.isEmpty(this.state.errors) ? (\n              ''\n            ) : (\n              <Message error>\n                <h3>\n                  <Lang>auth.errors</Lang>\n                </h3>\n                {this.displayErrors()}\n              </Message>\n            )}\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            labelPosition=\"left\"\n            icon\n            negative\n            onClick={() => this.closeModal()}\n          >\n            <Icon name=\"remove\" />\n            Cancel\n          </Button>\n          <Button\n            labelPosition=\"right\"\n            icon\n            positive\n            onClick={event => this.handleSubmit(event)}\n          >\n            <Icon name=\"save\" />\n            Save\n          </Button>\n        </Modal.Actions>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(EditAlbumModalForm);\n"]},"metadata":{},"sourceType":"module"}