{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _PropTypes = require('./PropTypes');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar NavigationPrompt = function (_React$Component) {\n  _inherits(NavigationPrompt, _React$Component);\n\n  function NavigationPrompt() {\n    _classCallCheck(this, NavigationPrompt);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  NavigationPrompt.prototype.block = function block() {\n    if (!this.teardownPrompt) this.teardownPrompt = this.context.history.block(this.props.message);\n  };\n\n  NavigationPrompt.prototype.unblock = function unblock() {\n    if (this.teardownPrompt) {\n      this.teardownPrompt();\n      this.teardownPrompt = null;\n    }\n  };\n\n  NavigationPrompt.prototype.componentWillMount = function componentWillMount() {\n    if (this.props.when) this.block();\n  };\n\n  NavigationPrompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.when) {\n      this.block();\n    } else {\n      this.unblock();\n    }\n  };\n\n  NavigationPrompt.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.unblock();\n  };\n\n  NavigationPrompt.prototype.render = function render() {\n    return null;\n  };\n\n  return NavigationPrompt;\n}(_react2.default.Component);\n\nNavigationPrompt.contextTypes = {\n  history: _PropTypes.historyContext.isRequired\n};\nNavigationPrompt.defaultProps = {\n  when: true\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  NavigationPrompt.propTypes = {\n    when: _react.PropTypes.bool,\n    message: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]).isRequired\n  };\n}\n\nexports.default = NavigationPrompt;","map":null,"metadata":{},"sourceType":"script"}